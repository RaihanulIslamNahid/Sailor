import {
  __commonJS
} from "./chunk-HYZYPRER.js";

// node_modules/tweakpane-plugin-media/dist/tweakpane-plugin-media.js
var require_tweakpane_plugin_media = __commonJS({
  "node_modules/tweakpane-plugin-media/dist/tweakpane-plugin-media.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.TweakpaneMediaPlugin = {}));
    })(exports, function(exports2) {
      "use strict";
      function forceCast(v) {
        return v;
      }
      const PREFIX = "tp";
      function ClassName(viewName) {
        const fn = (opt_elementName, opt_modifier) => {
          return [
            PREFIX,
            "-",
            viewName,
            "v",
            opt_elementName ? `_${opt_elementName}` : "",
            opt_modifier ? `-${opt_modifier}` : ""
          ].join("");
        };
        return fn;
      }
      function parseObject(value, keyToParserMap) {
        const keys = Object.keys(keyToParserMap);
        const result = keys.reduce((tmp, key) => {
          if (tmp === void 0) {
            return void 0;
          }
          const parser = keyToParserMap[key];
          const result2 = parser(value[key]);
          return result2.succeeded ? Object.assign(Object.assign({}, tmp), { [key]: result2.value }) : void 0;
        }, {});
        return forceCast(result);
      }
      function parseArray(value, parseItem) {
        return value.reduce((tmp, item) => {
          if (tmp === void 0) {
            return void 0;
          }
          const result = parseItem(item);
          if (!result.succeeded || result.value === void 0) {
            return void 0;
          }
          return [...tmp, result.value];
        }, []);
      }
      function isObject(value) {
        if (value === null) {
          return false;
        }
        return typeof value === "object";
      }
      function createParamsParserBuilder(parse) {
        return (optional) => (v) => {
          if (!optional && v === void 0) {
            return {
              succeeded: false,
              value: void 0
            };
          }
          if (optional && v === void 0) {
            return {
              succeeded: true,
              value: void 0
            };
          }
          const result = parse(v);
          return result !== void 0 ? {
            succeeded: true,
            value: result
          } : {
            succeeded: false,
            value: void 0
          };
        };
      }
      function createParamsParserBuilders(optional) {
        return {
          custom: (parse) => createParamsParserBuilder(parse)(optional),
          boolean: createParamsParserBuilder((v) => typeof v === "boolean" ? v : void 0)(optional),
          number: createParamsParserBuilder((v) => typeof v === "number" ? v : void 0)(optional),
          string: createParamsParserBuilder((v) => typeof v === "string" ? v : void 0)(optional),
          function: createParamsParserBuilder((v) => typeof v === "function" ? v : void 0)(optional),
          constant: (value) => createParamsParserBuilder((v) => v === value ? value : void 0)(optional),
          raw: createParamsParserBuilder((v) => v)(optional),
          object: (keyToParserMap) => createParamsParserBuilder((v) => {
            if (!isObject(v)) {
              return void 0;
            }
            return parseObject(v, keyToParserMap);
          })(optional),
          array: (itemParser) => createParamsParserBuilder((v) => {
            if (!Array.isArray(v)) {
              return void 0;
            }
            return parseArray(v, itemParser);
          })(optional)
        };
      }
      const ParamsParsers = {
        optional: createParamsParserBuilders(true),
        required: createParamsParserBuilders(false)
      };
      function parseParams(value, keyToParserMap) {
        const result = ParamsParsers.required.object(keyToParserMap)(value);
        return result.succeeded ? result.value : void 0;
      }
      function createNumberFormatter(digits) {
        return (value) => {
          return value.toFixed(Math.max(Math.min(digits, 20), 0));
        };
      }
      const innerFormatter = createNumberFormatter(0);
      function formatPercentage(value) {
        return innerFormatter(value) + "%";
      }
      function constrainRange(value, min, max) {
        return Math.min(Math.max(value, min), max);
      }
      function removeAlphaComponent(comps) {
        return [comps[0], comps[1], comps[2]];
      }
      function zerofill(comp) {
        const hex = constrainRange(Math.floor(comp), 0, 255).toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function colorToHexRgbString(value, prefix = "#") {
        const hexes = removeAlphaComponent(value.getComponents("rgb")).map(zerofill).join("");
        return `${prefix}${hexes}`;
      }
      function colorToHexRgbaString(value, prefix = "#") {
        const rgbaComps = value.getComponents("rgb");
        const hexes = [rgbaComps[0], rgbaComps[1], rgbaComps[2], rgbaComps[3] * 255].map(zerofill).join("");
        return `${prefix}${hexes}`;
      }
      function colorToFunctionalRgbString(value, opt_type) {
        const formatter = createNumberFormatter(opt_type === "float" ? 2 : 0);
        const comps = removeAlphaComponent(value.getComponents("rgb", opt_type)).map((comp) => formatter(comp));
        return `rgb(${comps.join(", ")})`;
      }
      function createFunctionalRgbColorFormatter(type) {
        return (value) => {
          return colorToFunctionalRgbString(value, type);
        };
      }
      function colorToFunctionalRgbaString(value, opt_type) {
        const aFormatter = createNumberFormatter(2);
        const rgbFormatter = createNumberFormatter(opt_type === "float" ? 2 : 0);
        const comps = value.getComponents("rgb", opt_type).map((comp, index) => {
          const formatter = index === 3 ? aFormatter : rgbFormatter;
          return formatter(comp);
        });
        return `rgba(${comps.join(", ")})`;
      }
      function createFunctionalRgbaColorFormatter(type) {
        return (value) => {
          return colorToFunctionalRgbaString(value, type);
        };
      }
      function colorToFunctionalHslString(value) {
        const formatters = [
          createNumberFormatter(0),
          formatPercentage,
          formatPercentage
        ];
        const comps = removeAlphaComponent(value.getComponents("hsl")).map((comp, index) => formatters[index](comp));
        return `hsl(${comps.join(", ")})`;
      }
      function colorToFunctionalHslaString(value) {
        const formatters = [
          createNumberFormatter(0),
          formatPercentage,
          formatPercentage,
          createNumberFormatter(2)
        ];
        const comps = value.getComponents("hsl").map((comp, index) => formatters[index](comp));
        return `hsla(${comps.join(", ")})`;
      }
      function colorToObjectRgbString(value, type) {
        const formatter = createNumberFormatter(type === "float" ? 2 : 0);
        const names = ["r", "g", "b"];
        const comps = removeAlphaComponent(value.getComponents("rgb", type)).map((comp, index) => `${names[index]}: ${formatter(comp)}`);
        return `{${comps.join(", ")}}`;
      }
      function createObjectRgbColorFormatter(type) {
        return (value) => colorToObjectRgbString(value, type);
      }
      function colorToObjectRgbaString(value, type) {
        const aFormatter = createNumberFormatter(2);
        const rgbFormatter = createNumberFormatter(type === "float" ? 2 : 0);
        const names = ["r", "g", "b", "a"];
        const comps = value.getComponents("rgb", type).map((comp, index) => {
          const formatter = index === 3 ? aFormatter : rgbFormatter;
          return `${names[index]}: ${formatter(comp)}`;
        });
        return `{${comps.join(", ")}}`;
      }
      function createObjectRgbaColorFormatter(type) {
        return (value) => colorToObjectRgbaString(value, type);
      }
      [
        {
          format: {
            alpha: false,
            mode: "rgb",
            notation: "hex",
            type: "int"
          },
          stringifier: colorToHexRgbString
        },
        {
          format: {
            alpha: true,
            mode: "rgb",
            notation: "hex",
            type: "int"
          },
          stringifier: colorToHexRgbaString
        },
        {
          format: {
            alpha: false,
            mode: "hsl",
            notation: "func",
            type: "int"
          },
          stringifier: colorToFunctionalHslString
        },
        {
          format: {
            alpha: true,
            mode: "hsl",
            notation: "func",
            type: "int"
          },
          stringifier: colorToFunctionalHslaString
        },
        ...["int", "float"].reduce((prev, type) => {
          return [
            ...prev,
            {
              format: {
                alpha: false,
                mode: "rgb",
                notation: "func",
                type
              },
              stringifier: createFunctionalRgbColorFormatter(type)
            },
            {
              format: {
                alpha: true,
                mode: "rgb",
                notation: "func",
                type
              },
              stringifier: createFunctionalRgbaColorFormatter(type)
            },
            {
              format: {
                alpha: false,
                mode: "rgb",
                notation: "object",
                type
              },
              stringifier: createObjectRgbColorFormatter(type)
            },
            {
              format: {
                alpha: true,
                mode: "rgb",
                notation: "object",
                type
              },
              stringifier: createObjectRgbaColorFormatter(type)
            }
          ];
        }, [])
      ];
      const className$1 = ClassName("tmp");
      class PluginView$1 {
        constructor(doc, config) {
          this.params_ = config.params;
          this.value_ = config.value;
          this.value_.rawValue.id = this.value_.rawValue.src;
          this.extensions_ = this.params_.extensions || ".jpg, .jpeg, .png, .webp, .avif";
          this.element = this.createElement_(doc);
          config.viewProps.bindClassModifiers(this.element);
          this.head_ = this.createHead_(doc);
          this.element.appendChild(this.head_);
          this.monitor_ = this.createMonitor_(doc);
          this.head_.appendChild(this.monitor_);
          this.container_ = this.createContainer_(doc);
          this.element.appendChild(this.container_);
          this.input = this.createInput_(doc);
          this.container_.appendChild(this.input);
          this.label_ = this.createLabel_(doc);
          this.container_.appendChild(this.label_);
          this.image_ = this.createImage_();
          this.container_.appendChild(this.image_);
          this.bindAll_();
          this.setupEventListeners_();
          this.refresh_();
          config.viewProps.handleDispose(() => {
            this.removeEventListeners_();
          });
        }
        refresh_() {
          this.image_.setAttribute("src", this.value_.rawValue.src);
          if (this.value_.rawValue.src) {
            this.image_.style.opacity = "1";
            this.label_.style.opacity = "0";
          } else {
            this.label_.style.opacity = "1";
          }
          this.monitor_.innerHTML = this.value_.rawValue.id;
          if (this.value_.rawValue.id && this.params_.showMonitor) {
            this.head_.style.display = "flex";
          }
        }
        createElement_(doc) {
          const element = doc.createElement("div");
          element.classList.add(className$1());
          element.style.position = "relative";
          element.style.height = `${this.params_.height || 100}px`;
          return element;
        }
        createContainer_(doc) {
          const container = doc.createElement("div");
          container.classList.add(className$1("container"));
          container.style.height = `${this.params_.height || 100}px`;
          return container;
        }
        createHead_(doc) {
          const head = doc.createElement("div");
          head.classList.add(className$1("head"));
          if (this.value_.rawValue.id && this.params_.showMonitor)
            head.style.display = "flex";
          return head;
        }
        createMonitor_(doc) {
          const monitor = doc.createElement("div");
          monitor.classList.add(className$1("monitor"));
          monitor.innerHTML = this.value_.rawValue.id;
          return monitor;
        }
        createInput_(doc) {
          const input = doc.createElement("input");
          input.classList.add(className$1("input"));
          input.setAttribute("id", "image");
          input.setAttribute("type", "file");
          input.setAttribute("accept", this.extensions_);
          return input;
        }
        createLabel_(doc) {
          const label = doc.createElement("label");
          label.setAttribute("for", "image");
          label.classList.add(className$1("label"));
          label.innerHTML = "<span>Import image</span>";
          return label;
        }
        createImage_() {
          const image = new Image();
          image.style.position = "absolute";
          image.style.pointerEvents = "none";
          image.style.left = "0";
          image.style.top = "0";
          image.style.width = "100%";
          image.style.height = "100%";
          image.style.objectFit = this.params_.objectFit || "cover";
          return image;
        }
        bindAll_() {
          this.valueChangedHandler_ = this.valueChangedHandler_.bind(this);
          this.dragenterHandler_ = this.dragenterHandler_.bind(this);
          this.dragleaveHandler_ = this.dragleaveHandler_.bind(this);
          this.mouseenterHandler_ = this.mouseenterHandler_.bind(this);
          this.mouseleaveHandler_ = this.mouseleaveHandler_.bind(this);
        }
        setupEventListeners_() {
          this.value_.emitter.on("change", this.valueChangedHandler_);
          this.input.addEventListener("dragenter", this.dragenterHandler_);
          this.input.addEventListener("dragleave", this.dragleaveHandler_);
          this.input.addEventListener("mouseenter", this.mouseenterHandler_);
          this.input.addEventListener("mouseleave", this.mouseleaveHandler_);
        }
        removeEventListeners_() {
          this.value_.emitter.off("change", this.valueChangedHandler_.bind(this));
          this.input.removeEventListener("dragenter", this.dragenterHandler_);
          this.input.removeEventListener("dragleave", this.dragleaveHandler_);
          this.input.removeEventListener("mouseenter", this.mouseenterHandler_);
          this.input.removeEventListener("mouseleave", this.mouseleaveHandler_);
        }
        valueChangedHandler_() {
          this.refresh_();
        }
        dragenterHandler_(event) {
          if (event.dataTransfer && event.dataTransfer.items[0] && event.dataTransfer.items[0].type.includes("image")) {
            this.image_.style.opacity = "0";
            this.label_.style.opacity = "1";
          }
        }
        dragleaveHandler_() {
          if (this.value_.rawValue.src) {
            this.image_.style.opacity = "1";
            this.label_.style.opacity = "0";
          }
        }
        mouseenterHandler_() {
          this.container_.style.opacity = "0.5";
        }
        mouseleaveHandler_() {
          this.container_.style.opacity = "1";
        }
      }
      class PluginController$1 {
        constructor(doc, config) {
          this.value = config.value;
          this.params = config.params;
          this.viewProps = config.viewProps;
          this.viewProps.handleDispose(() => {
            this.removeEventListeners_();
          });
          this.view = new PluginView$1(doc, {
            value: this.value,
            viewProps: this.viewProps,
            params: this.params
          });
          this.bindAll_();
          this.setupEventListeners_();
        }
        bindAll_() {
          this.inputHandler_ = this.inputHandler_.bind(this);
        }
        setupEventListeners_() {
          this.view.input.addEventListener("input", this.inputHandler_);
        }
        removeEventListeners_() {
          this.view.input.removeEventListener("input", this.inputHandler_);
        }
        inputHandler_() {
          const file = this.view.input.files ? this.view.input.files[0] : null;
          if (!file)
            return;
          const image = new Image();
          image.src = URL.createObjectURL(file);
          image.id = file.name;
          const loadHandler = () => {
            image.removeEventListener("load", loadHandler);
            this.value.rawValue = image;
          };
          image.addEventListener("load", loadHandler);
        }
      }
      const PluginImageInput = {
        id: "image-input",
        type: "input",
        css: ".tp-tmpv{display:flex;flex-direction:column;overflow:hidden;position:relative;background-color:var(--bs-bg)}.tp-tmpv.tp-v-disabled{opacity:.5}.tp-tmpv_label{display:flex;justify-content:center;align-items:center;position:absolute;left:0;top:0;bottom:0;right:0;margin:auto;text-align:center;width:100%;pointer-events:none;color:var(--in-fg);font-size:.9em;line-height:.9;opacity:.5}.tp-tmpv_container{position:relative;background-color:var(--in-bg);border-radius:var(--elm-br);overflow:hidden}.tp-tmpv_head{display:none;align-items:center;width:100%;height:2em;margin-bottom:4px;background-color:var(--in-bg-a);border-radius:var(--elm-br);white-space:nowrap}.tp-tmpv_monitor{margin-top:1px;font-size:.9em;line-height:.9;opacity:.5;padding-left:4px;color:var(--in-fg)}.tp-tmpv_input{position:absolute;left:0;top:0;width:100%;height:100%;opacity:0;padding:0;cursor:pointer}.tp-tmpv input::-webkit-file-upload-button{display:none}",
        accept(exValue, params) {
          if (!exValue)
            return null;
          if (!(exValue instanceof HTMLImageElement))
            return null;
          const result = parseParams(params, {
            // `view` option may be useful to provide a custom control for primitive values
            extensions: ParamsParsers.optional.string,
            objectFit: ParamsParsers.optional.string,
            height: ParamsParsers.optional.number,
            showMonitor: ParamsParsers.optional.boolean,
            label: ParamsParsers.required.string,
            view: ParamsParsers.required.constant("image")
          });
          if (!result) {
            return null;
          }
          return {
            initialValue: exValue,
            params: result
          };
        },
        binding: {
          reader(_args) {
            return (exValue) => {
              return exValue instanceof HTMLImageElement ? exValue : new Image();
            };
          },
          writer(_args) {
            return (target, inValue) => {
              target.write(inValue);
            };
          }
        },
        controller(args) {
          return new PluginController$1(args.document, {
            value: args.value,
            viewProps: args.viewProps,
            params: args.params
          });
        }
      };
      const className = ClassName("tmp");
      class PluginView {
        constructor(doc, config) {
          this.params_ = config.params;
          this.value_ = config.value;
          this.value_.rawValue.id = this.value_.rawValue.src;
          this.extensions_ = this.params_.extensions || ".mp4, .mov, .mpeg, .ogg, .webm, .mkv, .avi";
          this.element = this.createElement_(doc);
          config.viewProps.bindClassModifiers(this.element);
          this.head_ = this.createHead_(doc);
          this.element.appendChild(this.head_);
          this.monitor_ = this.createMonitor_(doc);
          this.head_.appendChild(this.monitor_);
          this.container_ = this.createContainer_(doc);
          this.element.appendChild(this.container_);
          this.input = this.createInput_(doc);
          this.container_.appendChild(this.input);
          this.label_ = this.createLabel_(doc);
          this.container_.appendChild(this.label_);
          this.video_ = this.createVideo_(doc);
          this.container_.appendChild(this.video_);
          this.bindAll_();
          this.setupEventListeners_();
          this.refresh_();
          config.viewProps.handleDispose(() => {
            this.removeEventListeners_();
          });
        }
        refresh_() {
          this.video_.setAttribute("src", this.value_.rawValue.src);
          if (this.value_.rawValue.src) {
            this.video_.style.opacity = "1";
            this.label_.style.opacity = "0";
          } else {
            this.label_.style.opacity = "1";
          }
          this.monitor_.innerHTML = this.value_.rawValue.id;
          if (this.value_.rawValue.id && this.params_.showMonitor) {
            this.head_.style.display = "flex";
          }
        }
        createElement_(doc) {
          const element = doc.createElement("div");
          element.classList.add(className());
          element.style.position = "relative";
          if (this.params_.height)
            element.style.height = `${this.params_.height}px`;
          return element;
        }
        createContainer_(doc) {
          const container = doc.createElement("div");
          container.classList.add(className("container"));
          if (this.params_.height)
            container.style.height = `${this.params_.height}px`;
          return container;
        }
        createHead_(doc) {
          const head = doc.createElement("div");
          head.classList.add(className("head"));
          if (this.value_.rawValue.id && this.params_.showMonitor)
            head.style.display = "flex";
          return head;
        }
        createMonitor_(doc) {
          const monitor = doc.createElement("div");
          monitor.classList.add(className("monitor"));
          monitor.innerHTML = this.value_.rawValue.id;
          return monitor;
        }
        createInput_(doc) {
          const input = doc.createElement("input");
          input.classList.add(className("input"));
          input.setAttribute("id", "image");
          input.setAttribute("type", "file");
          input.setAttribute("accept", this.extensions_);
          return input;
        }
        createLabel_(doc) {
          const label = doc.createElement("label");
          label.setAttribute("for", "image");
          label.classList.add(className("label"));
          label.innerHTML = "<span>Import video</span>";
          return label;
        }
        createVideo_(doc) {
          const video = doc.createElement("video");
          video.setAttribute("muted", "true");
          video.setAttribute("playsinline", "true");
          video.setAttribute("autoplay", "true");
          video.setAttribute("loop", "true");
          video.style.opacity = "0";
          video.style.position = "absolute";
          video.style.pointerEvents = "none";
          video.style.left = "0";
          video.style.top = "0";
          video.style.width = "100%";
          video.style.height = "100%";
          video.style.objectFit = "cover";
          video.style.objectFit = this.params_.objectFit || "cover";
          return video;
        }
        bindAll_() {
          this.valueChangedHandler_ = this.valueChangedHandler_.bind(this);
          this.dragenterHandler_ = this.dragenterHandler_.bind(this);
          this.dragleaveHandler_ = this.dragleaveHandler_.bind(this);
          this.mouseenterHandler_ = this.mouseenterHandler_.bind(this);
          this.mouseleaveHandler_ = this.mouseleaveHandler_.bind(this);
        }
        setupEventListeners_() {
          this.value_.emitter.on("change", this.valueChangedHandler_);
          this.input.addEventListener("dragenter", this.dragenterHandler_);
          this.input.addEventListener("dragleave", this.dragleaveHandler_);
          this.input.addEventListener("mouseenter", this.mouseenterHandler_);
          this.input.addEventListener("mouseleave", this.mouseleaveHandler_);
        }
        removeEventListeners_() {
          this.value_.emitter.off("change", this.valueChangedHandler_.bind(this));
          this.input.removeEventListener("dragenter", this.dragenterHandler_);
          this.input.removeEventListener("dragleave", this.dragleaveHandler_);
          this.input.removeEventListener("mouseenter", this.mouseenterHandler_);
          this.input.removeEventListener("mouseleave", this.mouseleaveHandler_);
        }
        valueChangedHandler_() {
          this.refresh_();
        }
        dragenterHandler_(event) {
          if (event.dataTransfer && event.dataTransfer.items[0] && event.dataTransfer.items[0].type.includes("video")) {
            this.video_.style.opacity = "0";
            this.label_.style.opacity = "1";
          }
        }
        dragleaveHandler_() {
          if (this.value_.rawValue.src) {
            this.video_.style.opacity = "1";
            this.label_.style.opacity = "0";
          }
        }
        mouseenterHandler_() {
          this.container_.style.opacity = "0.5";
        }
        mouseleaveHandler_() {
          this.container_.style.opacity = "1";
        }
      }
      class PluginController {
        constructor(doc, config) {
          this.value = config.value;
          this.params = config.params;
          this.viewProps = config.viewProps;
          this.viewProps.handleDispose(() => {
            this.removeEventListeners_();
          });
          this.view = new PluginView(doc, {
            value: this.value,
            viewProps: this.viewProps,
            params: this.params
          });
          this.bindAll_();
          this.setupEventListeners_();
        }
        bindAll_() {
          this.inputHandler_ = this.inputHandler_.bind(this);
        }
        setupEventListeners_() {
          this.view.input.addEventListener("input", this.inputHandler_);
        }
        removeEventListeners_() {
          this.view.input.removeEventListener("input", this.inputHandler_);
        }
        inputHandler_() {
          const file = this.view.input.files ? this.view.input.files[0] : null;
          if (!file)
            return;
          const video = document.createElement("video");
          video.src = URL.createObjectURL(file);
          video.id = file.name;
          const loadHandler = () => {
            video.removeEventListener("canplay", loadHandler);
            this.value.rawValue = video;
          };
          video.addEventListener("canplay", loadHandler);
        }
      }
      const PluginVideoInput = {
        id: "video-input",
        type: "input",
        css: ".tp-tmpv{display:flex;flex-direction:column;overflow:hidden;position:relative;background-color:var(--bs-bg)}.tp-tmpv.tp-v-disabled{opacity:.5}.tp-tmpv_label{display:flex;justify-content:center;align-items:center;position:absolute;left:0;top:0;bottom:0;right:0;margin:auto;text-align:center;width:100%;pointer-events:none;color:var(--in-fg);font-size:.9em;line-height:.9;opacity:.5}.tp-tmpv_container{position:relative;background-color:var(--in-bg);border-radius:var(--elm-br);overflow:hidden}.tp-tmpv_head{display:none;align-items:center;width:100%;height:2em;margin-bottom:4px;background-color:var(--in-bg-a);border-radius:var(--elm-br);white-space:nowrap}.tp-tmpv_monitor{margin-top:1px;font-size:.9em;line-height:.9;opacity:.5;padding-left:4px;color:var(--in-fg)}.tp-tmpv_input{position:absolute;left:0;top:0;width:100%;height:100%;opacity:0;padding:0;cursor:pointer}.tp-tmpv input::-webkit-file-upload-button{display:none}",
        accept(exValue, params) {
          if (!exValue)
            return null;
          if (!(exValue instanceof HTMLVideoElement))
            return null;
          const result = parseParams(params, {
            // `view` option may be useful to provide a custom control for primitive values
            extensions: ParamsParsers.optional.string,
            objectFit: ParamsParsers.optional.string,
            height: ParamsParsers.optional.number,
            showMonitor: ParamsParsers.optional.boolean,
            label: ParamsParsers.required.string,
            view: ParamsParsers.required.constant("video")
          });
          if (!result) {
            return null;
          }
          return {
            initialValue: exValue,
            params: result
          };
        },
        binding: {
          reader(_args) {
            return (exValue) => {
              return exValue instanceof HTMLVideoElement ? exValue : document.createElement("video");
            };
          },
          writer(_args) {
            return (target, inValue) => {
              target.write(inValue);
            };
          }
        },
        controller(args) {
          return new PluginController(args.document, {
            value: args.value,
            viewProps: args.viewProps,
            params: args.params
          });
        }
      };
      const plugins = [PluginImageInput, PluginVideoInput];
      exports2.plugins = plugins;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});
export default require_tweakpane_plugin_media();
//# sourceMappingURL=tweakpane-plugin-media.js.map
